import type { Heading } from '@/model/model';
import type { Heading as MdastHeading } from 'mdast';
import type { PhrasingContent } from "mdast";
import remarkParse from "remark-parse";
import { unified } from "unified";
import { visit } from "unist-util-visit";

/**
 * Simple function to generate a URL-friendly slug from text.
 * Mimics the basic behavior of rehype-slug/github-slugger.
 * @param {string} text - The text to slugify
 */
export function createSlug(text: string): string {
  if (!text) return '';
  return text
    .toLowerCase()
    .replace(/\s+/g, '-') // Replace spaces with -
    .replace(/[^\w-]+/g, '') // Remove all non-word chars except -
    //.replace(/--+/g, '-') // todo: -- is generated by remark-slug
    .replace(/^-+/, '') // Trim - from start of text
    .replace(/-+$/, ''); // Trim - from end of text
}

/**
 * Extracts headings (h1-h6) from MDX content string.
 * @param {string} content - The MDX content to parse.
 */
export function extractHeadings(content: string): Heading[] {
  if (!content || content.length === 0) return [];

  const headings: Heading[] = [];
  const tree = unified().use(remarkParse).parse(content);

  visit(tree, 'heading', (node: MdastHeading) => {
    let text = '';
    // Extract text content from heading children
    visit(node, ['text', 'inlineCode'], (child: MdastHeading | PhrasingContent) => {
      if (child.type === 'text' || child.type === 'inlineCode') {
        text += child.value;
      }
    });

    if (text && node.depth) {
      headings.push({
        text: text,
        depth: node.depth,
        slug: createSlug(text),
      });
    }
  });

  return headings;
}
